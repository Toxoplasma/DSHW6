================================================================================
								TOURNAMENT YAHTZEE 							
================================================================================

Team Members: Alejandro Frias (afrias@g.hmc.edu) and Ravi Kumar (rkumar@g.hmc.edu)

Table of Contents:
	* Main Manager
	* Tournament Manager (TM)
	* Match Manager (MM)
	* Game Manager (GM)
	* Player Process
	* Suggested Protocol
	* Messages in the System
	* Correctness Argument

Main Manager
============

Description:
	Top of the system. Users login to this manager and can talk directly with this 
	manager for overall stats of past tournaments.

Data:
	logged_in_players - A list of all the players currently logged in
	registered_players - A list of all the registered players
	tournament_stats - All the stats from finished tournaments for each player
	ongoing_tournaments - A list of ongoing tournaments.


    * Handles players logging in. A successful login always adds the player to
      logged_in_players and sends an acknowledgment to the player.
      Additional work is done for the two types of players trying to log in:
      	1. New Player ->
      			Add the player to registered_players, storing their 
      			password/key and initializing an empty spot in tournament_stats 
      			for them.
      	2. Already Registered Player (in registered_players) ->
      			Notify all active Tournament Managers of the login
    * Keeps track of who is currently logged by monitoring each player and 
      adding/removing them to/from logged_in_players. Players are always added 
      to the end of logged_in_players
    * Keeps track of past tournament stats (win/loss of tournaments) for each 
      player in tournament_stats.
    * Receives external command to start a yahtzee tournament with 2^m (m > 0) 
      slots and k (k > 0 and odd) games per match.
      Starts the tournament with as many as possible of the currently logged in 
      players and fills empty slots with "byes." First come, first served 
      implemented by taking the first 2^m out of logged_in_players and then 
      moving them to the end of the list.
    * Receives and handles requests from the environment for players' stats.
    * Receives stats from Tournament Manager(s) to add to tournament_stats
    * When it receives the winner of the tournament, remove it from ongoing_tournaments.

Tournament Manager
==================
Description:
	Manages an individual tournament. Main Manager starts this process up with a 
	list of players, a tournament size (power of two, so 'm' is sent assuming size 2^m),
	and a number of games per match (k > 0 and odd).

Data:
	player_list - A list of all players still in the tournament
	logged_in_players - A list of all the players still logged (a subset of player_list)
	m - There are 2^m initial slots
	k - Each match is best out of k games
	tournament_stats - How each player is doing in the tournament
  ongoing_matches - A list of matches currently being played in the tournament.


    * Runs the tournament:
      - Determine the brackets.
      - Starts up matches between players with a Match Manager.
      - Receives results from matches, used to determine next round and eventually a winner. 
        Then it removes the match from the list of ongoing matches.
    * Keep track of tournament stats for each player for the current tournament
    * Keeps track of which players are in the tournament still (ones that haven't lost)
    * Keeps track (through monitoring) of which players are still logged in
    * Can receive login messages from Main Manager:
      - If the player is still in the tournament, then it finds out which match 
        the player was in and sends that Match Manager a login message
      - If the player is not in the tournament, then don't do anything
    * When a player is eliminated from the tournament (loses) or wins the entire 
      tournament, send the stats for that player to the Main Manager to keep 
      track of.
    * Shuts down after tournament is finished


Match Manager
=============
Description:
	Manages a match of 'k' games (k > 0 and is odd) between two players. Each game
	is dealt with by a Game Manager. Returns results of match to Tournament Manager.

Data:
	k - The number of games the match will be decided out of (first to ceiling of k/2)
	match_stats - The stats of each player in the match (win/loss at a minimum), 
	              the current score and which game the players are on
	players - The two players in this match


    * Keeps track of all stats of each completed game (received from Game
      Managers) for the two players.
    * Monitors both players. Can receive join message from Tournament Manager to 
      have the player rejoin in time for next game
    * Handles crashed players by making them forfeit the match if they're not 
      back within a reasonable amount of time
    * Handles ties and "byes" as per the specs
    * After sending stats/results to Tournament Manger at the end of the match, shutdown


Game manager
============

Description:
	Plays out one game with two players (until score card is filled out for both). 
	Sends result of game to Match Manager. Is initialized with results of previous games 
	in the match so that it can tell the players of their current standing in the match.
Data:
	players - The two players in the game
	scorecard - The scores of each player so far, showing which score boxes have been filled in.
	game_stats - Any interesting stats that might want to be kept track of by the 
				 Main Manager (might be nothing more than if the player won or lost)
	full_dice_roll - The 15 randomly generated dice rolls used for the game
	player_one_last_five - The last five dice rolls given to player one (used for cheat detection)
	player_two_last_five - The last five dice rolls given to player two (used for cheat detection)


	* Communicates with the players during each turn to give them dice rolls
	* Keeps track of the score and verifies that neither player is cheating.
	* Watches for either player crashing and handles that.
	* Reports the outcome of the game to the match manager.

States: Assembly phase, Scoring phase

* Note: Cheating is checked at every stage/message very simply. No direct 
        communication between players is allowed. So this just means checking 
        that the reported keepers are a subset of the last 5 given dice rolls.

Assembly phase:
	1. When the GM enters the assembly phase, it generates the 15 dice rolls for 
	   the turn, and sends the first five to each player. 
	2. The players reply with their choice of keepers.
	3. When the GM receives this message, it will send them the set of five dice
	   rolls it has now (the keepers from the previous roll plus the re-rolls take
	   from the list). This message is tagged as the first re-roll. The player 
	   will again reply with their choice of keepers.
	4. When the GM receives this second set of keepers, it replies with the final
	   set of five dice values, and enters the scoring phase. This message is 
	   tagged as final dice.
	
scoring phase:
	1. In the scoring phase, the players will send the GM their choice for which
	   box to put their score for this turn in, and the GM will record this. 
	   After this, it will check to see if the game is over or if there are more 
	   turns (boxes to fill out for either player).
	2. If it is over, it reports the results of the game to its Match Manager.
	   Otherwise, it returns to the assembly phase and thus starts another turn.


Player Process
==============

Description:
	Players can register/login. They also respond to messages from Game Managers with
	their choices. THe player expects all information about the game/match from these
	messages, and simply replies what it would do in such a game state.
Data:
	Main Manager - A way to comminicate with the main manager for login/registration purposes


	* Registers with Main Managers, by sending username/password login attempts
	* Waits for success message from Main Manager so they know they're logged in.
	* Plays matches/games against other players, as managed by MMs and GMs. 
	  Only GM will interact directly with the player

A Player process only has one state, from which it reacts to all game messages. 
It also stores no data at all; instead, all messages sent to players will contain 
all relevant information for that message. For example, a game message will 
contain all info so far about that game including current dice, scorecard, etc., 
as well as about the match (such as the win/losses so far and number of games in 
the match), which matches were lost due to crashing, etc. This way, players can 
handle crashes quite elegantly, as it simply rejoins and registers with the main 
manager, and waits to receive messages and handles them normally. 


Suggested Protocol
==================

Start Tournament:
	{Pid, Ref, start_tournament, M, K}
	Pid - The Pid of the process requesting a tournament be started (to send the 
	      results to once it's over)
	Ref - A unique reference for that tournament (also for returning of results)
	M - There will be 2^M slots in the tournament (designates the size). M > 0
	K - Game per Match. K > 0 and odd

  	When a Main Manager receives this, it will compute the list of players that 
  	should be in the tournament. The assignment says random selection, but we 
  	prefer first come, first served by taking the first 2^M logged_in_players. It 
  	then starts up a TM, passing it the list of players, the size of the tournament, 
  	and the number of games in each match. When the tournament finishes, it notifies 
  	the Pid of the winnner

Stats Request:
	{Pid, Ref, stats_request, Player}
	Player - The username of the player whose stats you want

  	Message from the environment (possibly from a player) to a Main Manager asking 
  	for stats about a specific player. The main manager can then respond with 
  	the stats, since it keeps track of stats for each player. If stats of ongoing 
  	tournaments are required, more messages for gather a snap shot can be added to 
  	the algorithm for that. Currently this just handles stats of finished tournaments.

Stats Response:
	{Ref, stats_response, Data}
	Data - All the stats for the player

  	Sent by a Main Manager to the requester of stats. This messages contains all stats 
  	that we keep track of for the requested player (win/losses at a minimum, 
  	a play-by-play of every tournament at a maximum)

Player Registration/Login:
	{Pid, Ref, player_registration, Username, Password}
	Pid - Process ID of the player. Will be used for all communication with that 
	      player (no global registration needed)
	Ref - Unique reference used to tag a particular login. Whenever a player 
	      logs out and back in, they should give a new Ref and only accept message 
	      with that Ref.
	Username - The username with which the player wishes to register/login as
	Password - The password for registration/login

  	Sent by a player to the main manager when it joins. If the main manager hasn't 
  	seen that player before, it simply adds it to registered_players. If the 
  	player is already in registered_players, it will send all the TMs a Rejoin 
  	Notification that that player has rejoined, in case they're in any ongoing 
  	tournaments. It will then reply to the player with an acknowledgment that 
  	they're is logged in.

Registration Acknowledgment:
	{Ref, login_success}
  	Sent by the Main Manager to a Player to let the player know that they are 
  	logged in.

Turn Starting:
	{Pid, Ref, start_turn, DiceRoll, GameState, MatchState}
	Pid - Process ID of Game Manager that the Player responds to with its choice of keepers
	Ref - A unique reference to mark the the message with (used to distinguish 
		  who is responding and prevent cheating of the sort of pretending to be 
		  another player)
	DiceRoll - The first 5 dice for the turn.
	GameState - The current scorecards of both players, and history of game. 
				Score cards are dictionaries with keys like 'aces' with the score 
				assigned or 'no_value' if no score yet assigned. The history is
				an array of each turn and what each player choice for each re-roll.
	MatchState - How many games each player has won so far and how many games in 
	 			 the match to play (and possibly a play-by-play or scorecard of 
	 			 previous games if deemed necessary to implement)

  	Sent by GMs, received by players. Contains everything about the state of the 
  	game and match overall so far that the player could possibly care about, as well 
  	as the initial set of 5 dice values the player rolls for the turn. Waits for a 
  	reply from the player of their first selection of keepers.

First Modification Attempt:
	{Ref, first_modification_attempt, Keepers}
	Ref - the unique reference given in the start_turn message
	Keepers - A subset of the DiceRoll given in the start_turn message

	Sent by players to GMs. Contains the player's decision about which dice to 
	keep and which to re-roll for its first modification attempt. A second_roll 
	message is then sent to the player, awaiting  second_modification_attempt 
	message. If Keepers is equivalent to DiceRoll given, then skip to final_roll 
	message and await score_selection message.

First Modification Reply:
	{Pid, Ref, second_roll, DiceRoll, GameState, MatchState}
	Pid - Process ID of Game Manager that the Player responds to with its second choice of keepers
	Ref - A unique reference to mark the the message with (used to distinguish 
		  who is responding and prevent cheating of the sort of pretending to be 
		  another player)
	DiceRoll - The set of 5 dice made up of the Keepers from first_modification_attempt 
			   and filled in with the next dice rolls of the full_dice_roll made at 
			   the beginning of the game by the GM.
	GameState - The current scorecards of both players, and history of game. 
				Score cards are dictionaries with keys like 'aces' with the score 
				assigned or 'no_value' if no score yet assigned. The history is
				an array of each turn and what each player choice for each re-roll.
	MatchState - How many games each player has won so far and how many games in 
	 			 the match to play (and possibly a play-by-play or scorecard of 
	 			 previous games if deemed necessary to implement)

  	Sent by GMs, received by players. Contains everything about the tournament 
  	state so far that the player could possibly care about, as well the player's 
  	new set of five dice rolls that it gets after their first_modification_attempt 
  	(a combination of the Keepers sent filled in with the predetermined dice rolls 
  	for the game.

Second Modification Attempt:
	{Ref, second_modification_attempt, Keepers}
	Ref - the unique reference given in the second_roll message
	Keepers - A subset of the DiceRoll given in the start_turn message

  	Sent by players to GMs. Contains the player's decision about which dice to 
  	keep and which to re-roll for its second_modification_attempt.

Second Modification Attempt Reply:
	{Pid, Ref, final_roll, DiceRoll, GameState, MatchState}
	Pid - Process ID of Game Manager that the Player responds to with its second choice of keepers
	Ref - A unique reference to mark the the message with (used to distinguish 
		  who is responding and prevent cheating of the sort of pretending to be 
		  another player)
	DiceRoll - The set of 5 dice made up of the Keepers from second_modification_attempt 
			   and filled in with the next dice rolls of the full_dice_roll made at 
			   the beginning of the game by the GM.
	GameState - The current scorecards of both players, and history of game. 
				Score cards are dictionaries with keys like 'aces' with the score 
				assigned or 'no_value' if no score yet assigned. The history is
				an array of each turn and what each player choice for each re-roll.
	MatchState - How many games each player has won so far and how many games in 
	 			 the match to play (and possibly a play-by-play or scorecard of 
	 			 previous games if deemed necessary to implement)

  	Sent by GMs, received by players. Contains everything about the tournament 
  	state so far that the player could possibly care about, as well the player's 
  	final set of five dice rolls. The player must now respond with a score_selection 
  	message for the next turn to start (or the game to end if it was the final turn).

Score Selection:
	{Ref, score_selection, ScoreBox}
	Ref - the unique reference given in the final_roll message
	ScoreBox - The unmarked box that the player wishes to use it's dice roll on

  	Sent by players to GMs. This message is used to indicate which box on the 
  	score card to use the turns final dice roll on.


Messages in the System
======================

Rejoin Notification (from Main Manager):
  	Sent by the Main Manager to all TMs when a player rejoins. When a TM receives 
  	this, it checks to see if that player is still in its tournament. If it is, it 
  	will notify the relevant MM of the player's new PID so the MM can continue 
  	running the match.

Rejoin Notification (from TM):
  	Sent by the TM to an MM when a player in that MM has logged back in. The MM 
  	will then continue running the match if it was waiting for that player to rejoin.

Tournament Player Result:
	Sent by TMs to Main Managers when a player loses or wins the entire tournament.
	It contains all the stats of the tournament for that player. The Main Manager 
	can then add these stats to that player's overall tournament stats.

Match Result:
  	Sent by MMs and received by the TMs. This message alerts the TM that a match 
  	has finished with results so that the TM can update its tournament_stats and 
  	player_list and determine the next match ups.

TM Initializer:
  	TMs are started by the Main Manager to manage a specific tournament. As a 
  	TM is created, it is sent the list of players in that tournament, the 
  	tournament size, and the number of games per match. It is also sent the Ref 
  	of the tournament request, and the PID to report back to when the tournament 
  	is finished. Finally, it receives the PID of its TM, so that it can report 
  	match results. 

Tournament Ended:
  	Sent by a TM to the environment to notify it that a tournament has finished.
  	Contains the Ref of the tournament as well as the winner.

MM Initialization:
  	MMs are started by TMs to handle a specific match. When a MM is created, it 
  	is sent the players in the match, and the number of games in the match.

GM Initialization:
 	GMs are started by MMs to handle a specific game. When a GM is created, it is 
 	sent the players in the match, and will organize a single game between those 
 	players. It is also sent the completed games in the match, so that the players 
 	can be sent this (in case their mastermind strategy depends on it somehow).

Correctness Argument
====================

<<<<<<< HEAD
Our algorithm correctly handles new players joining as well as players rejoining after leaving or crashing. When a player first joins, they will be potentially added to tournaments as they begin. The main manager stores their password/key for later to ensure that we correctly handle possible later crashes and rejoins. When a player joins with a password, the main manager checks that this is the correct player and sends messages to relevant managers to ensure that the player is contacted to continue any matches and tournaments it is in.

When a main manager is told to start a tournament, it randomly selects the specified number of players and begins a tournament, as described in the assignment. Notably, players can't cheat in tournaments, as all games are managed by GMs that can easily detect a player's cheating, as the GM maintains a copy of the player's rolls and scorecard, and ensures that they don't attempt to make any illegal moves. This is described further in the GM description.

Our system also correctly handles players crashing. When a player crashes midgame, the GM (which monitors the players in the game) immediately reports that the game is over and that the non-crashed player has won. The MM (which is also monitoring the players in the match) will then wait the alotted amount of time for the crashed player to log back in and continue the match. When the player does log in, the main manager will send a message through the TM to the match manager with the player's new PID so the match can continue. We're guaranteed that this message will arrive, since the rejoin notification is sent to all TMs. Then the match continues as it should. If a player crashes between matches, the TM will know this, as it monitors the players in the tournament, and will again wait the alotted amount of time before replacing the player with a bye. When a player crashes and isn't in any tournaments, rejoining is very simple, as we don't need to do anything other than restore them to the list of players eligible for tournaments. 
=======
Our algorithm correctly handles new players joining as well as 
players rejoining after leaving or crashing. When a player first 
joins, they will be potentially added to tournaments as they begin. 
The main manager stores their password/key for later to ensure that 
we correctly handle possible later crashes and rejoins. When a 
player joins with a password, the main manager checks that this is 
the correct player and sends messages to relevant managers to ensure 
that the player is contacted to continue any matches and tournaments 
it is in.

When a main manager is told to start a tournament, it randomly 
selects the specified number of players and begins a tournament, as 
described in the assignment. Notably, players can't cheat in 
tournaments, as all games are managed by GMs that can easily detect 
a player's cheating, as the GM maintains a copy of the player's 
rolls and scorecard, and ensures that they don't attempt to make any 
illegal moves. This is described further in the GM description.

Our system also correctly handles players crashing. When a player 
crashes midgame, the GM (which monitors the players in the game) 
immediately reports that the game is over and that the non-crashed 
player has won. The MM (which is also monitoring the players in the 
match) will then wait the alloted amount of time for the crashed 
player to log back in and continue the match. When the player does 
log in, the main manager will send a message through the TM to the 
match manager with the player's new PID so the match can continue. 
We're guaranteed that this message will arrive, since the rejoin 
notification is sent to all TMs. Then the match continues as it 
should. If a player crashes between matches, the TM will know this, 
as it monitors the players in the tournament, and will again wait 
the alloted amount of time before replacing the player with a bye. 
When a player crashes and isn't in any tournaments, rejoining is 
very simple, as we don't need to do anything other than restore them 
to the list of players eligible for tournaments.
>>>>>>> 145c2db7bd90bfb5f6b60209cbf4b99aa67c8cb3
